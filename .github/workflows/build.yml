name: Build TvOS Unsigned IPA

on:
  workflow_dispatch:

jobs:
  build:
    name: Build TvOS Unsigned IPA
    runs-on: macos-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Find Xcode Project and Workspace
    - name: Find Xcode Project and Workspace
      id: find_xcode_files
      run: |
        echo "Finding Xcode project and workspace..."
        PROJECT_PATH=$(find . -name "*.xcodeproj" | head -n 1)
        WORKSPACE_PATH=$(find . -name "*.xcworkspace" | head -n 1)

        if [ -z "$PROJECT_PATH" ]; then
          echo "No .xcodeproj file found."
          exit 1
        fi

        if [ -z "$WORKSPACE_PATH" ]; then
          echo "No .xcworkspace file found. Using project only."
          WORKSPACE_PATH=""
        fi

        echo "PROJECT_PATH=$PROJECT_PATH" >> $GITHUB_ENV
        echo "WORKSPACE_PATH=$WORKSPACE_PATH" >> $GITHUB_ENV

    # Step 3: Find Xcode Schemes
    - name: Find Xcode Schemes
      id: find_schemes
      run: |
        echo "Finding Xcode schemes..."
        SCHEMES=$(xcodebuild -list -project $PROJECT_PATH | grep 'Schemes:' -A 1000 | grep -v 'Targets:' | sed 's/^[ \t]*//;s/[ \t]*$//')

        if [ -z "$SCHEMES" ]; then
          echo "No schemes found."
          exit 1
        fi

        FIRST_SCHEME=$(echo "$SCHEMES" | head -n 1)
        echo "SCHEME=$FIRST_SCHEME" >> $GITHUB_ENV
        echo "Found schemes: $SCHEMES"
        echo "Selected scheme: $FIRST_SCHEME"

    # Step 4: Install Dependencies
    - name: Install Dependencies
      run: |
        echo "Checking for and installing dependencies..."
        if [ -f "$PROJECT_PATH/Podfile" ]; then
          echo "Podfile found. Installing CocoaPods dependencies..."
          sudo gem install cocoapods
          cd $(dirname $PROJECT_PATH)
          pod install
        else
          echo "No Podfile found. Skipping CocoaPods installation."
        fi

        if [ -f "$PROJECT_PATH/Cartfile" ]; then
          echo "Cartfile found. Installing Carthage dependencies..."
          brew install carthage
          cd $(dirname $PROJECT_PATH)
          carthage bootstrap --platform tvOS
        else
          echo "No Cartfile found. Skipping Carthage installation."
        fi

    # Step 5: Clean the Build Folder
    - name: Clean Build Folder
      run: |
        echo "Cleaning build folder..."
        rm -rf build/

    # Step 6: Build Unsigned IPA file using the Xcode project
    - name: Build Unsigned IPA
      run: |
        if [ -z "$WORKSPACE_PATH" ]; then
          echo "Building using project..."
          xcodebuild -project $PROJECT_PATH \
                     -scheme $SCHEME \
                     -sdk appletvos \
                     -configuration Debug \
                     -archivePath $PWD/build/AMA.MOVIES.xcarchive \
                     clean archive \
                     CODE_SIGNING_ALLOWED=NO \
                     CODE_SIGNING_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO \
                     PROVISIONING_PROFILE_SPECIFIER=""
        else
          echo "Building using workspace..."
          xcodebuild -workspace $WORKSPACE_PATH \
                     -scheme $SCHEME \
                     -sdk appletvos \
                     -configuration Debug \
                     -archivePath $PWD/build/AMA.MOVIES.xcarchive \
                     clean archive \
                     CODE_SIGNING_ALLOWED=NO \
                     CODE_SIGNING_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO \
                     PROVISIONING_PROFILE_SPECIFIER=""
        fi

        xcodebuild -exportArchive \
                   -archivePath $PWD/build/AMA.MOVIES.xcarchive \
                   -exportOptionsPlist exportOptions.plist \
                   -exportPath $PWD/build \
                   CODE_SIGNING_ALLOWED=NO \
                   CODE_SIGNING_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   PROVISIONING_PROFILE_SPECIFIER=""

    # Step 7: Upload the Unsigned IPA as an artifact
    - name: Upload Unsigned IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: AMA.MOVIES-Unsigned-IPA
        path: build/*.ipa
